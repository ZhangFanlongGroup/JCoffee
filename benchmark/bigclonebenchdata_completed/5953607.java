import java.io.*;
import java.lang.*;
import java.util.*;
import java.math.*;
import java.net.*;
import java.applet.*;
import java.security.*;



class c5953607 {
public MyHelperClass write(ComponentStyle o0){ return null; }
public MyHelperClass Constants;
	public MyHelperClass imagesToCopy;
	public MyHelperClass config;
	public MyHelperClass doc;
	public MyHelperClass getClassName(){ return null; }

    public synchronized void write() throws Throwable, IOException {
        MyHelperClass jarPath = new MyHelperClass();
        ZipOutputStream jar = new ZipOutputStream(new FileOutputStream((String)(Object)jarPath));
        MyHelperClass className = new MyHelperClass();
        int index =(int)(Object) className.lastIndexOf('.');
//        MyHelperClass className = new MyHelperClass();
        String packageName =(String)(Object) className.substring(0, index);
//        MyHelperClass className = new MyHelperClass();
        String clazz =(String)(Object) className.substring(index + 1);
        String directory = packageName.replace('.', '/');
        ZipEntry dummyClass = new ZipEntry(directory + "/" + clazz + ".class");
        jar.putNextEntry(dummyClass);
        ClassGen classgen = new ClassGen(getClassName(), "java.lang.Object", "<generated>",(int)(Object) Constants.ACC_PUBLIC | (int)(Object)Constants.ACC_SUPER, null);
        byte[] bytes =(byte[])(Object) classgen.getJavaClass().getBytes();
        jar.write(bytes);
        jar.closeEntry();
        ZipEntry synthFile = new ZipEntry(directory + "/synth.xml");
        jar.putNextEntry(synthFile);
        Comment comment = new Comment("Generated by SynthBuilder from L2FProd.com");
        Element root = new Element("synth");
        root.addAttribute(new Attribute("version", "1"));
        root.appendChild(comment);
        Element defaultStyle = new Element("style");
        defaultStyle.addAttribute(new Attribute("id", "default"));
        Element defaultFont = new Element("font");
        defaultFont.addAttribute(new Attribute("name", "SansSerif"));
        defaultFont.addAttribute(new Attribute("size", "12"));
        defaultStyle.appendChild(defaultFont);
        Element defaultState = new Element("state");
        defaultStyle.appendChild(defaultState);
        root.appendChild(defaultStyle);
        Element bind = new Element("bind");
        bind.addAttribute(new Attribute("style", "default"));
        bind.addAttribute(new Attribute("type", "region"));
        bind.addAttribute(new Attribute("key", ".*"));
        root.appendChild(bind);
        doc =(MyHelperClass)(Object) new Document(root);
        imagesToCopy =(MyHelperClass)(Object) new HashMap();
        ComponentStyle[] styles =(ComponentStyle[])(Object) config.getStyles();
        for (ComponentStyle element : styles) {
            write(element);
        }
        Serializer writer = new Serializer(jar);
        writer.setIndent(2);
        writer.write(doc);
        writer.flush();
        jar.closeEntry();
        for (Iterator iter =(Iterator)(Object) imagesToCopy.keySet().iterator(); iter.hasNext(); ) {
            String element = (String) iter.next();
            File pathToImage = (File)(File)(Object) imagesToCopy.get(element);
            ZipEntry image = new ZipEntry(directory + "/" + element);
            jar.putNextEntry(image);
            FileInputStream input = new FileInputStream(pathToImage);
            int read = -1;
            while ((read = input.read()) != -1) {
                jar.write(read);
            }
            input.close();
            jar.flush();
            jar.closeEntry();
        }
        jar.flush();
        jar.close();
    }

}

// Code below this line has been added to remove errors
class MyHelperClass {
public MyHelperClass ACC_PUBLIC;
	public MyHelperClass ACC_SUPER;
public MyHelperClass substring(int o0, int o1){ return null; }
	public MyHelperClass getStyles(){ return null; }
	public MyHelperClass iterator(){ return null; }
	public MyHelperClass lastIndexOf(char o0){ return null; }
	public MyHelperClass getBytes(){ return null; }
	public MyHelperClass substring(int o0){ return null; }
	public MyHelperClass get(String o0){ return null; }
	public MyHelperClass keySet(){ return null; }}

class ZipOutputStream {

ZipOutputStream(){}
	ZipOutputStream(FileOutputStream o0){}
	public MyHelperClass putNextEntry(ZipEntry o0){ return null; }
	public MyHelperClass closeEntry(){ return null; }
	public MyHelperClass write(byte[] o0){ return null; }
	public MyHelperClass flush(){ return null; }
	public MyHelperClass write(int o0){ return null; }
	public MyHelperClass close(){ return null; }}

class ZipEntry {

ZipEntry(String o0){}
	ZipEntry(){}}

class ClassGen {

ClassGen(MyHelperClass o0, String o1, String o2, int o3, Object o4){}
	ClassGen(){}
	public MyHelperClass getJavaClass(){ return null; }}

class Comment {

Comment(String o0){}
	Comment(){}}

class Element {

Element(){}
	Element(String o0){}
	public MyHelperClass addAttribute(Attribute o0){ return null; }
	public MyHelperClass appendChild(Element o0){ return null; }
	public MyHelperClass appendChild(Comment o0){ return null; }}

class Attribute {

Attribute(String o0, String o1){}
	Attribute(){}}

class Document {

Document(Element o0){}
	Document(){}}

class ComponentStyle {

}

class Serializer {

Serializer(ZipOutputStream o0){}
	Serializer(){}
	public MyHelperClass write(MyHelperClass o0){ return null; }
	public MyHelperClass flush(){ return null; }
	public MyHelperClass setIndent(int o0){ return null; }}
